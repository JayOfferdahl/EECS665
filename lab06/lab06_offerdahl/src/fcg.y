%{
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern int yylineno;
int yydebug = 1;
char* lastFunction = "";
extern void yyerror( char* );
extern int yylex();
%}

/*********************************************************
 ********************************************************/
%union {
    char* id;
}

%token <id> ID
%token INTVAL
%token FLTVAL
%token DBLVAL
%token STRVAL
%token CHARVAL
%token VOID
%token CHAR
%token SHORT
%token INT
%token LONG
%token FLOAT
%token DOUBLE
%token EQ
%token NE
%token GE
%token LE
%token GT
%token LT
%token ADD
%token SUB
%token MUL
%token DIV
%token MOD
%token BITOR
%token BITAND
%token BITXOR
%token LSH
%token RSH
%token SET
%token RETURN
%token WHILE
%token IF
%token ELSE

%start top

%%

/* The top level parsing rule, as set using the %start directive above. */
top
    :
    | function top

/* This rule matches a function in C Program */
function
    : function_signature '{' function_body '}'

/* This rule matches a function signature such as int main(int argc, char *argv[]) */
function_signature
    : type ID '(' args ')' { printf("%s", $2); printf(";\n"); lastFunction = $2;}

/* This rule matches a function body which is a collection of statements */
function_body
    :
    | statement function_body

/* This rule matches the required statement types from the lab page. Eliminates left recursion. */
statement
    : ID SET expression ';'
    | RETURN expression ';'
    | statementBlock
    | ifStatement
    | ifElseStatement
    | WHILE '(' expression ')' statementBlock
    | expression squareBrackets ';'
    | declaration ';'

/* This rule matches a block of statements surrounded by curly brackets. Used in loops/if blocks */
statementBlock
    : '{' statements '}'

/* This rule matches multiple statements which are linked in a right recursive manner */
statements
    : 
    | statement statements

/* This rule matches a declaration. Take the form of a typed ID, may be a pointer/array */
declaration
    : type ID squareBrackets
    | type MUL ID

/* This rule matches an if-statement, which accepts an expression and is followed by a statementBlock */
ifStatement
    : IF '(' expression ')' statementBlock

/* This rule matches an if-else-statement, which has an ifStatement ELSE statementBlock */
ifElseStatement
    : ifStatement ELSE statementBlock

/* This rule matches all forms of function arguments, typed or not, listed or not, empty or not */
args
    :
    | type argument ',' args
    | type argument
    | argument ',' args
    | argument

/* This rule matches an argument which can be a pointer or array or both */
argument 
    : expression squareBrackets
    | MUL expression squareBrackets

/* This rule allows for array acceses to be recognized in args or expressions */
squareBrackets
    : 
    | '[' expression ']'
    | '[' ']'

/* This rule matches an expression which may be comprised of several expressionPrimes */
expression
    : expressionPrime operator expression
    | expressionPrime
    
/* This rule matches literal values or function calls */
expressionPrime
    : INTVAL
    | STRVAL
    | CHARVAL
    | DBLVAL
    | FLTVAL
    | ID '(' args ')' { printf("%s -> %s;\n", lastFunction, $1); }
    | ID

/* Operators follow precedence of operations as defined on web page */
operator
    : myDear

myDear
    : MUL
    | DIV
    | MOD
    | auntSally

auntSally
    : ADD
    | SUB
    | bitShift

bitShift
    : LSH
    | RSH
    | compareOps

compareOps    
    : NE
    | LT
    | GT
    | LE
    | GE
    | equivOps

equivOps
    : EQ
    | bitand

bitand
    : BITAND
    | bitxor

bitxor
    : BITXOR
    | bitor

bitor
    : BITOR

type
    : VOID
    | CHAR
    | SHORT
    | INT
    | LONG
    | FLOAT
    | DOUBLE

%%

/*********************************************************
 * This method is invoked by the parser whenever an
 * error is encountered during parsing; just print
 * the error to stderr.
 ********************************************************/
void yyerror( char *err ) {
    fprintf( stderr, "at line %d: %s\n", yylineno, err );
}

/*********************************************************
 * This is the main function for the function call
 * graph program. We invoke the parser and return the
 * error/success code generated by it.
 ********************************************************/
int main( int argc, const char *argv[] ) {
    printf( "digraph funcgraph {\n" );
    int res = yyparse();
    printf( "}\n" );

    return res;
}
